import React, { useState } from 'react';
import { Modal, Form, Select, Input, Button, Space, Typography, Alert, Descriptions } from 'antd';
import { ExclamationCircleOutlined, CloseCircleOutlined } from '@ant-design/icons';
import { toast } from 'react-toastify';

const { Option } = Select;
const { TextArea } = Input;
const { Text, Title } = Typography;

/**
 * BookingRejectionModal - Admin component for rejecting bookings
 * Provides reason selection and confirmation for booking rejection
 */
const BookingRejectionModal = ({ 
  visible, 
  onCancel, 
  onConfirm, 
  booking, 
  loading = false 
}) => {
  const [form] = Form.useForm();
  const [submitting, setSubmitting] = useState(false);

  const rejectionReasons = [
    { value: 'barber_unavailable', label: 'Th·ª£ c·∫Øt t√≥c kh√¥ng c√≥ s·∫µn' },
    { value: 'service_not_available', label: 'D·ªãch v·ª• kh√¥ng kh·∫£ d·ª•ng' },
    { value: 'customer_request', label: 'Y√™u c·∫ßu c·ªßa kh√°ch h√†ng' },
    { value: 'other', label: 'L√Ω do kh√°c' }
  ];

  const handleSubmit = async () => {
    try {
      const values = await form.validateFields();
      setSubmitting(true);

      await onConfirm({
        reason: values.reason,
        note: values.note || null
      });

      toast.success('üö´ ƒê√£ t·ª´ ch·ªëi l·ªãch h·∫πn th√†nh c√¥ng', {
        position: "top-right",
        autoClose: 3000,
      });

      form.resetFields();
      onCancel();
    } catch (error) {
      if (error.errorFields) {
        // Form validation error
        toast.error('‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc', {
          position: "top-right",
          autoClose: 3000,
        });
      } else {
        // API error
        toast.error(`‚ùå L·ªói t·ª´ ch·ªëi l·ªãch h·∫πn: ${error.message || 'Vui l√≤ng th·ª≠ l·∫°i sau'}`, {
          position: "top-right",
          autoClose: 4000,
        });
      }
    } finally {
      setSubmitting(false);
    }
  };

  const handleCancel = () => {
    form.resetFields();
    onCancel();
  };

  if (!booking) return null;

  return (
    <Modal
      title={
        <Space>
          <CloseCircleOutlined style={{ color: '#ff4d4f' }} />
          <span>T·ª´ ch·ªëi l·ªãch h·∫πn</span>
        </Space>
      }
      open={visible}
      onCancel={handleCancel}
      footer={null}
      width={600}
      destroyOnClose
    >
      <div style={{ marginBottom: 24 }}>
        <Alert
          message="C·∫£nh b√°o"
          description="Vi·ªác t·ª´ ch·ªëi l·ªãch h·∫πn s·∫Ω kh√¥ng th·ªÉ ho√†n t√°c. Kh√°ch h√†ng s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o v·ªÅ vi·ªác t·ª´ ch·ªëi n√†y."
          type="warning"
          icon={<ExclamationCircleOutlined />}
          showIcon
          style={{ marginBottom: 16 }}
        />

        <Title level={5}>Th√¥ng tin l·ªãch h·∫πn</Title>
        <Descriptions column={1} size="small" bordered>
          <Descriptions.Item label="Kh√°ch h√†ng">
            <Text strong>{booking.customerName || booking.customerId?.name}</Text>
          </Descriptions.Item>
          <Descriptions.Item label="S·ªë ƒëi·ªán tho·∫°i">
            {booking.customerPhone || booking.customerId?.phone || 'Kh√¥ng c√≥'}
          </Descriptions.Item>
          <Descriptions.Item label="Email">
            {booking.customerEmail || booking.customerId?.email || 'Kh√¥ng c√≥'}
          </Descriptions.Item>
          <Descriptions.Item label="D·ªãch v·ª•">
            <Text strong>{booking.serviceId?.name}</Text>
          </Descriptions.Item>
          <Descriptions.Item label="Th·ªùi gian">
            <Text strong>
              {new Date(booking.bookingDate).toLocaleString('vi-VN', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
              })}
            </Text>
          </Descriptions.Item>
          <Descriptions.Item label="Th·ªùi l∆∞·ª£ng">
            {booking.durationMinutes || booking.serviceId?.durationMinutes} ph√∫t
          </Descriptions.Item>
          <Descriptions.Item label="Tr·∫°ng th√°i hi·ªán t·∫°i">
            <Text type={booking.status === 'pending' ? 'warning' : 'success'}>
              {booking.status === 'pending' ? 'Ch·ªù x√°c nh·∫≠n' : 'ƒê√£ x√°c nh·∫≠n'}
            </Text>
          </Descriptions.Item>
          {booking.note && (
            <Descriptions.Item label="Ghi ch√∫">
              {booking.note}
            </Descriptions.Item>
          )}
        </Descriptions>
      </div>

      <Form
        form={form}
        layout="vertical"
        onFinish={handleSubmit}
      >
        <Form.Item
          name="reason"
          label="L√Ω do t·ª´ ch·ªëi"
          rules={[
            { required: true, message: 'Vui l√≤ng ch·ªçn l√Ω do t·ª´ ch·ªëi' }
          ]}
        >
          <Select
            placeholder="Ch·ªçn l√Ω do t·ª´ ch·ªëi l·ªãch h·∫πn"
            size="large"
          >
            {rejectionReasons.map(reason => (
              <Option key={reason.value} value={reason.value}>
                {reason.label}
              </Option>
            ))}
          </Select>
        </Form.Item>

        <Form.Item
          name="note"
          label="Ghi ch√∫ th√™m (t√πy ch·ªçn)"
          extra="Th√¥ng tin n√†y s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn kh√°ch h√†ng"
        >
          <TextArea
            rows={3}
            placeholder="Nh·∫≠p ghi ch√∫ th√™m v·ªÅ l√Ω do t·ª´ ch·ªëi..."
            maxLength={500}
            showCount
          />
        </Form.Item>

        <Form.Item style={{ marginBottom: 0, marginTop: 24 }}>
          <Space style={{ width: '100%', justifyContent: 'flex-end' }}>
            <Button 
              onClick={handleCancel}
              disabled={submitting}
            >
              H·ªßy
            </Button>
            <Button 
              type="primary" 
              danger
              htmlType="submit"
              loading={submitting || loading}
              icon={<CloseCircleOutlined />}
            >
              X√°c nh·∫≠n t·ª´ ch·ªëi
            </Button>
          </Space>
        </Form.Item>
      </Form>
    </Modal>
  );
};

export default BookingRejectionModal;
