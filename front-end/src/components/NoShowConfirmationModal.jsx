import React, { useState } from 'react';
import { Modal, Form, Input, Button, Space, Typography, Alert, Descriptions, Tag } from 'antd';
import { ExclamationCircleOutlined, UserDeleteOutlined, ClockCircleOutlined } from '@ant-design/icons';
import { toast } from 'react-toastify';
import dayjs from 'dayjs';

const { TextArea } = Input;
const { Text, Title } = Typography;

/**
 * NoShowConfirmationModal - Barber component for marking bookings as no-show
 * Includes time validation and customer details confirmation
 */
const NoShowConfirmationModal = ({ 
  visible, 
  onCancel, 
  onConfirm, 
  booking, 
  loading = false 
}) => {
  const [form] = Form.useForm();
  const [submitting, setSubmitting] = useState(false);

  const handleSubmit = async () => {
    try {
      const values = await form.validateFields();
      setSubmitting(true);

      await onConfirm({
        note: values.note || null
      });

      toast.success('üë§ ƒê√£ ƒë√°nh d·∫•u kh√°ch h√†ng kh√¥ng ƒë·∫øn', {
        position: "top-right",
        autoClose: 3000,
      });

      form.resetFields();
      onCancel();
    } catch (error) {
      if (error.errorFields) {
        // Form validation error
        toast.error('‚ùå Vui l√≤ng ki·ªÉm tra th√¥ng tin ƒë√£ nh·∫≠p', {
          position: "top-right",
          autoClose: 3000,
        });
      } else {
        // API error
        toast.error(`‚ùå L·ªói ƒë√°nh d·∫•u kh√¥ng ƒë·∫øn: ${error.message || 'Vui l√≤ng th·ª≠ l·∫°i sau'}`, {
          position: "top-right",
          autoClose: 4000,
        });
      }
    } finally {
      setSubmitting(false);
    }
  };

  const handleCancel = () => {
    form.resetFields();
    onCancel();
  };

  if (!booking) return null;

  // Calculate time information
  const now = dayjs();
  const bookingTime = dayjs(booking.bookingDate);
  const bookingEnd = bookingTime.add(booking.durationMinutes || booking.serviceId?.durationMinutes || 60, 'minute');
  const isBookingStarted = now.isAfter(bookingTime);
  const isBookingEnded = now.isAfter(bookingEnd);
  const minutesFromStart = now.diff(bookingTime, 'minute');

  // Time status for display
  const getTimeStatus = () => {
    if (isBookingEnded) {
      return {
        type: 'error',
        text: `ƒê√£ qu√° ${Math.abs(minutesFromStart - (booking.durationMinutes || 60))} ph√∫t`,
        color: '#ff4d4f'
      };
    } else if (isBookingStarted) {
      return {
        type: 'warning',
        text: `ƒê√£ b·∫Øt ƒë·∫ßu ${minutesFromStart} ph√∫t`,
        color: '#faad14'
      };
    } else {
      return {
        type: 'info',
        text: `C√≤n ${Math.abs(minutesFromStart)} ph√∫t n·ªØa`,
        color: '#1890ff'
      };
    }
  };

  const timeStatus = getTimeStatus();

  return (
    <Modal
      title={
        <Space>
          <UserDeleteOutlined style={{ color: '#ff4d4f' }} />
          <span>ƒê√°nh d·∫•u kh√¥ng ƒë·∫øn</span>
        </Space>
      }
      open={visible}
      onCancel={handleCancel}
      footer={null}
      width={600}
      destroyOnClose
    >
      <div style={{ marginBottom: 24 }}>
        <Alert
          message="X√°c nh·∫≠n kh√°ch h√†ng kh√¥ng ƒë·∫øn"
          description="Vi·ªác ƒë√°nh d·∫•u kh√¥ng ƒë·∫øn s·∫Ω ƒë∆∞·ª£c ghi nh·∫≠n v√†o h·ªì s∆° kh√°ch h√†ng v√† kh√¥ng th·ªÉ ho√†n t√°c."
          type="warning"
          icon={<ExclamationCircleOutlined />}
          showIcon
          style={{ marginBottom: 16 }}
        />

        {/* Time Status Alert */}
        <Alert
          message={
            <Space>
              <ClockCircleOutlined />
              <span>Tr·∫°ng th√°i th·ªùi gian: {timeStatus.text}</span>
            </Space>
          }
          type={timeStatus.type}
          style={{ marginBottom: 16 }}
        />

        <Title level={5}>Th√¥ng tin l·ªãch h·∫πn</Title>
        <Descriptions column={1} size="small" bordered>
          <Descriptions.Item label="Kh√°ch h√†ng">
            <Space>
              <Text strong>{booking.customerName || booking.customerId?.name}</Text>
              <Tag color="blue">ID: {booking.customerId?._id || booking.customerId}</Tag>
            </Space>
          </Descriptions.Item>
          <Descriptions.Item label="S·ªë ƒëi·ªán tho·∫°i">
            <Text copyable>
              {booking.customerPhone || booking.customerId?.phone || 'Kh√¥ng c√≥'}
            </Text>
          </Descriptions.Item>
          <Descriptions.Item label="Email">
            <Text copyable>
              {booking.customerEmail || booking.customerId?.email || 'Kh√¥ng c√≥'}
            </Text>
          </Descriptions.Item>
          <Descriptions.Item label="D·ªãch v·ª•">
            <Space>
              <Text strong>{booking.serviceId?.name}</Text>
              <Tag color="green">
                {booking.serviceId?.price?.toLocaleString('vi-VN')}ƒë
              </Tag>
            </Space>
          </Descriptions.Item>
          <Descriptions.Item label="Th·ªùi gian ƒë·∫∑t">
            <Space direction="vertical" size={0}>
              <Text strong>
                {bookingTime.format('dddd, DD/MM/YYYY')}
              </Text>
              <Text strong style={{ color: timeStatus.color }}>
                {bookingTime.format('HH:mm')} - {bookingEnd.format('HH:mm')}
              </Text>
            </Space>
          </Descriptions.Item>
          <Descriptions.Item label="Th·ªùi l∆∞·ª£ng">
            {booking.durationMinutes || booking.serviceId?.durationMinutes} ph√∫t
          </Descriptions.Item>
          <Descriptions.Item label="Th·ªùi gian hi·ªán t·∫°i">
            <Text type="secondary">
              {now.format('HH:mm DD/MM/YYYY')}
            </Text>
          </Descriptions.Item>
          {booking.note && (
            <Descriptions.Item label="Ghi ch√∫ booking">
              <Text italic>{booking.note}</Text>
            </Descriptions.Item>
          )}
        </Descriptions>
      </div>

      <Form
        form={form}
        layout="vertical"
        onFinish={handleSubmit}
      >
        <Form.Item
          name="note"
          label="Ghi ch√∫ v·ªÅ vi·ªác kh√¥ng ƒë·∫øn (t√πy ch·ªçn)"
          extra="Th√¥ng tin n√†y s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o h·ªì s∆° kh√°ch h√†ng"
        >
          <TextArea
            rows={3}
            placeholder="V√≠ d·ª•: Kh√°ch h√†ng kh√¥ng ƒë·∫øn v√† kh√¥ng th√¥ng b√°o tr∆∞·ªõc..."
            maxLength={300}
            showCount
          />
        </Form.Item>

        <div style={{ 
          background: '#fff2e8', 
          border: '1px solid #ffbb96', 
          borderRadius: 6, 
          padding: 12, 
          marginBottom: 16 
        }}>
          <Text strong style={{ color: '#d46b08' }}>
            ‚ö†Ô∏è L∆∞u √Ω: Sau khi x√°c nh·∫≠n, l·ªãch h·∫πn s·∫Ω ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† "Kh√¥ng ƒë·∫øn" v√† th·ªùi gian n√†y s·∫Ω ƒë∆∞·ª£c gi·∫£i ph√≥ng cho kh√°ch h√†ng kh√°c ƒë·∫∑t l·ªãch.
          </Text>
        </div>

        <Form.Item style={{ marginBottom: 0, marginTop: 24 }}>
          <Space style={{ width: '100%', justifyContent: 'flex-end' }}>
            <Button 
              onClick={handleCancel}
              disabled={submitting}
            >
              H·ªßy
            </Button>
            <Button 
              type="primary" 
              danger
              htmlType="submit"
              loading={submitting || loading}
              icon={<UserDeleteOutlined />}
            >
              X√°c nh·∫≠n kh√¥ng ƒë·∫øn
            </Button>
          </Space>
        </Form.Item>
      </Form>
    </Modal>
  );
};

export default NoShowConfirmationModal;
