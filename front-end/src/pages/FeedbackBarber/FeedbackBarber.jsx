import React, { useState, useEffect } from 'react';
import {
  Card,
  Typography,
  Form,
  Rate,
  Input,
  Button,
  Upload,
  message,
  Row,
  Col,
  Descriptions,
  Tag,
  Space,
  Avatar,
  Divider,
  Alert
} from 'antd';
import {
  StarOutlined,
  CameraOutlined,
  UserOutlined,
  CalendarOutlined,
  CheckCircleOutlined,
  PlusOutlined
} from '@ant-design/icons';
import { useParams, useNavigate } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext.jsx';
import { getMyBookings } from '../../services/serviceApi.js';
import { createBarberFeedback, getBarberFeedbackById } from '../../services/api.js';
import { uploadImage } from '../../services/api.js';
import dayjs from 'dayjs';
import './FeedbackBarber.css';
import 'bootstrap/dist/css/bootstrap.min.css';

const { Title, Text } = Typography;
const { TextArea } = Input;

const FeedbackBarber = () => {
  const { bookingId } = useParams();
  const navigate = useNavigate();
  const { user } = useAuth();
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [booking, setBooking] = useState(null);
  const [fileList, setFileList] = useState([]);
  const [previewVisible, setPreviewVisible] = useState(false);
  const [previewImage, setPreviewImage] = useState('');
  const [toast, setToast] = useState({ show: false, message: '', variant: 'success' });

  useEffect(() => {
    if (bookingId) {
      loadBookingDetails();
    }
  }, [bookingId]);

  const showToast = (variant, message) => {
  setToast({ show: true, message, variant });
  setTimeout(() => setToast(t => ({ ...t, show: false })), 3000);
};

  const loadBookingDetails = async () => {
    setLoading(true);
    try {
      // Check if feedback already exists
      try {
        const response = await getBarberFeedbackById(bookingId);
        if (response.data) {
          message.info('B·∫°n ƒë√£ ƒë√°nh gi√° cho l·ªãch h·∫πn n√†y r·ªìi');
          navigate('/my-booking');
          return;
        }
      } catch (error) {
        // Feedback doesn't exist, continue with loading booking
      }

      // Load booking details from my bookings
      const response = await getMyBookings();
      const bookings = response.bookings || response;
      const currentBooking = bookings.find(b => b._id === bookingId);

      if (!currentBooking) {
        message.error('Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t l·ªãch');
        navigate('/my-booking');
        return;
      }

      if (currentBooking.status !== 'completed') {
        message.error('Ch·ªâ c√≥ th·ªÉ ƒë√°nh gi√° nh·ªØng l·ªãch h·∫πn ƒë√£ ho√†n th√†nh');
        navigate('/my-booking');
        return;
      }

      setBooking(currentBooking);
    } catch (error) {
      message.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ƒë·∫∑t l·ªãch');
      console.error('Error loading booking:', error);
      navigate('/my-booking');
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (values) => {
  console.log('üî• Form submitted values:', values);
  console.log('üë§ user:', user);

  setSubmitting(true);

  const resolvedBarberId = booking?.barberId?._id || booking?.barberId;
  const customerId = user?.id || user?._id;

  if (!bookingId || !resolvedBarberId || !customerId) {
    console.warn('bookingId:', bookingId);
    console.warn('barberId:', resolvedBarberId);
    console.warn('customerId:', customerId);
    showToast('danger', 'Thi·∫øu th√¥ng tin booking, barber ho·∫∑c ng∆∞·ªùi d√πng');
    setSubmitting(false);
    return;
  }

  try {
    // Upload ·∫£nh
    let uploadedImages = [];
    if (fileList.length > 0) {
      const uploadPromises = fileList.map(async (file) => {
        if (file.originFileObj) {
          try {
            const response = await uploadImage(file.originFileObj);
            return response.data.url;
          } catch (err) {
            console.error('Upload image error:', err);
            showToast('danger', 'Kh√¥ng th·ªÉ t·∫£i ·∫£nh l√™n. Vui l√≤ng th·ª≠ l·∫°i.');
            return null;
          }
        }
        return file.url;
      });

      uploadedImages = await Promise.all(uploadPromises);
      uploadedImages = uploadedImages.filter(url => url !== null);
    }

    const feedbackData = {
      bookingId,
      barberId: resolvedBarberId,
      customerId,
      rating: values.rating,
      comment: values.comment.trim(),
      images: uploadedImages
    };

    console.log('üì§ Sending feedback data:', feedbackData);

    const response = await createBarberFeedback(feedbackData);

    console.log('‚úÖ Feedback API response:', response);

    showToast('success', 'C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√°!');
    setTimeout(() => navigate('/my-booking'), 2000);
  } catch (error) {
    const errorMessage = error?.response?.data?.message || 'ƒê√£ x·∫£y ra l·ªói khi g·ª≠i ƒë√°nh gi√°. Vui l√≤ng th·ª≠ l·∫°i.';
    console.error('‚ùå Submit feedback error:', error);
    showToast('danger', errorMessage);
  } finally {
    setSubmitting(false);
  }
};

  const handleImageUpload = ({ fileList: newFileList }) => {
    setFileList(newFileList);
  };

  const handlePreview = async (file) => {
    if (!file.url && !file.preview) {
      file.preview = await getBase64(file.originFileObj);
    }
    setPreviewImage(file.url || file.preview);
    setPreviewVisible(true);
  };

  const getBase64 = (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result);
      reader.onerror = error => reject(error);
    });
  };

  const uploadButton = (
    <div>
      <PlusOutlined />
      <div style={{ marginTop: 8 }}>T·∫£i ·∫£nh</div>
    </div>
  );

  if (loading) {
    return (
      <div style={{ textAlign: 'center', padding: '100px 0' }}>
        <Title level={3}>ƒêang t·∫£i...</Title>
      </div>
    );
  }

  if (!booking) {
    return (
      <div style={{ textAlign: 'center', padding: '100px 0' }}>
        <Title level={3}>Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·∫∑t l·ªãch</Title>
        <Button type="primary" onClick={() => navigate('/my-booking')}>
          Quay l·∫°i danh s√°ch ƒë·∫∑t l·ªãch
        </Button>
      </div>
    );
  }

  return (
    <div style={{ maxWidth: 800, margin: '0 auto', padding: 24 }}>
      <Card>
        <div style={{ textAlign: 'center', marginBottom: 24 }}>
          <CheckCircleOutlined 
            style={{ fontSize: 48, color: '#52c41a', marginBottom: 16 }} 
          />
          <Title level={2}>ƒê√°nh gi√° th·ª£ c·∫Øt t√≥c</Title>
          <Text type="secondary">
            Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n ƒë·ªÉ gi√∫p ch√∫ng t√¥i c·∫£i thi·ªán d·ªãch v·ª•
          </Text>
        </div>

        {/* Booking Information */}
        <Card 
          title="Th√¥ng tin ƒë·∫∑t l·ªãch" 
          style={{ marginBottom: 24 }}
          size="small"
        >
          <Descriptions column={1} size="small">
            <Descriptions.Item label="D·ªãch v·ª•">
              <div>
                <div style={{ fontWeight: 'bold' }}>{booking.serviceId.name}</div>
                <div style={{ color: '#666' }}>{booking.serviceId.description}</div>
                <Tag color="blue">{booking.serviceId.price.toLocaleString()} ƒë</Tag>
                <Tag color="green">{booking.serviceId.durationMinutes} ph√∫t</Tag>
              </div>
            </Descriptions.Item>
            <Descriptions.Item label="Th·ª£ c·∫Øt t√≥c">
              <div style={{ display: 'flex', alignItems: 'center' }}>
                <Avatar icon={<UserOutlined />} style={{ marginRight: 8 }} />
                <div>
                  <div style={{ fontWeight: 'bold' }}>{booking.barberId.userId.name}</div>
                  <Rate disabled defaultValue={booking.barberId.averageRating} style={{ fontSize: 12 }} />
                  <div style={{ fontSize: 12, color: '#666' }}>
                    {booking.barberId.specialties.join(', ')}
                  </div>
                </div>
              </div>
            </Descriptions.Item>
            <Descriptions.Item label="Th·ªùi gian">
              <div>
                <CalendarOutlined /> {dayjs(booking.bookingDate).format('DD/MM/YYYY HH:mm')}
              </div>
            </Descriptions.Item>
            <Descriptions.Item label="Tr·∫°ng th√°i">
              <Tag color="green">Ho√†n th√†nh</Tag>
            </Descriptions.Item>
          </Descriptions>
        </Card>

        {/* Feedback Form */}
        <Form
  form={form}
  layout="vertical"
  onFinish={(values) => {
    console.log('üî• Form submitted:', values);
    handleSubmit(values); // G·ªçi x·ª≠ l√Ω submit ch√≠nh
  }}
  initialValues={{ rating: 5, comment: '' }}
>

          <Row gutter={[16, 16]}>
            <Col xs={24}>
              <Form.Item
                name="rating"
                label="ƒê√°nh gi√° t·ªïng th·ªÉ"
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn s·ªë sao!' }]}
              >
                <Rate 
                  style={{ fontSize: 32 }}
                  character={<StarOutlined />}
                />
              </Form.Item>
            </Col>

            <Col xs={24}>
              <Form.Item
                name="comment"
                label="Nh·∫≠n x√©t chi ti·∫øt"
                rules={[{ required: true, message: 'Vui l√≤ng ƒë·ªÉ l·∫°i nh·∫≠n x√©t' }]}
              >
                <TextArea
                  rows={4}
                  placeholder="Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n v·ªÅ th·ª£ c·∫Øt t√≥c, ch·∫•t l∆∞·ª£ng d·ªãch v·ª•..."
                  maxLength={500}
                  showCount
                />
              </Form.Item>
            </Col>

            <Col xs={24}>
              <Form.Item
                label="H√¨nh ·∫£nh (t√πy ch·ªçn)"
              >
                <Upload
                  listType="picture-card"
                  fileList={fileList}
                  onPreview={handlePreview}
                  onChange={handleImageUpload}
                  beforeUpload={() => false} // Prevent auto upload
                  maxCount={5}
                >
                  {fileList.length >= 5 ? null : uploadButton}
                </Upload>
              </Form.Item>
              <Text type="secondary" style={{ fontSize: 12 }}>
                B·∫°n c√≥ th·ªÉ t·∫£i l√™n t·ªëi ƒëa 5 h√¨nh ·∫£nh ƒë·ªÉ minh h·ªça cho ƒë√°nh gi√°
              </Text>
            </Col>
          </Row>

          <Divider />

          <div style={{ textAlign: 'center' }}>
            <Space>
              <Button 
                onClick={() => navigate('/my-booking')}
                size="large"
              >
                H·ªßy b·ªè
              </Button>
              <Button 
  type="primary"
  onClick={() => form.submit()} // <-- d√πng submit th·ªß c√¥ng
  loading={submitting}
  size="large"
  icon={<StarOutlined />}
>
  G·ª≠i ƒë√°nh gi√°
</Button>

            </Space>
          </div>
        </Form>
      </Card>
      {/* Toast Notification */}
<div
  className="position-fixed"
  style={{ top: '4rem', right: '1rem', zIndex: 1060 }}
>
  {toast.show && (
    <div className={`toast align-items-center text-bg-${toast.variant} border-0 show`}>
      <div className="d-flex">
        <div className="toast-body">{toast.message}</div>
        <button
          type="button"
          className="btn-close btn-close-white me-2 m-auto"
          aria-label="Close"
          onClick={() => setToast(t => ({ ...t, show: false }))}
        />
      </div>
    </div>
  )}
</div>

      <Alert
        message="L∆∞u √Ω"
        description="ƒê√°nh gi√° c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã c√¥ng khai sau khi ƒë∆∞·ª£c ph√™ duy·ªát v√† gi√∫p kh√°ch h√†ng kh√°c c√≥ th√™m th√¥ng tin khi l·ª±a ch·ªçn th·ª£ c·∫Øt t√≥c."
        type="info"
        showIcon
        style={{ marginTop: 16 }}
      />
    </div>
  );
};


export default FeedbackBarber;