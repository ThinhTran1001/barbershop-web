import React, { useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { 
  Button, 
  Card, 
  Result, 
  Steps, 
  Divider,
  Typography,
  Space
} from 'antd';
import { 
  CheckCircleFilled, 
  ShoppingOutlined, 
  CarOutlined, 
  HomeOutlined,
  ArrowLeftOutlined,
  CopyOutlined
} from '@ant-design/icons';
import { notification } from 'antd';
import { useAuth } from '../../context/AuthContext';
import '../../css/checkout/order-success.css';

const { Title, Text, Paragraph } = Typography;

const OrderSuccess = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { clearCart } = useCartLoggedIn();
  const { user } = useAuth();
  const { orderId, totalAmount } = location.state || {};

  useEffect(() => {
    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ th√¥ng tin ƒë∆°n h√†ng th√¨ chuy·ªÉn v·ªÅ trang ch·ªß
    if (!orderId || !totalAmount) {
      notification.warning({
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆°n h√†ng',
        description: 'Vui l√≤ng th·ª≠ l·∫°i',
        placement: 'topRight',
      });
      navigate('/');
      return;
    }

    // Clear cart khi checkout th√†nh c√¥ng
    const clearCartOnSuccess = async () => {
      try {
        await clearCart();
        console.log('Cart cleared successfully after checkout');
      } catch (error) {
        console.error('Error clearing cart after checkout:', error);
      }
    };

    clearCartOnSuccess();

    // X√≥a localStorage selectedAddress khi ƒë·∫∑t h√†ng th√†nh c√¥ng
    const clearSelectedAddress = () => {
      try {
        if (user && user.id) {
          localStorage.removeItem(`selectedAddress_${user.id}`);
          console.log('üßπ Cleared selectedAddress from localStorage after successful order (OrderSuccess page)');
        }
      } catch (error) {
        console.error('Error clearing selectedAddress from localStorage:', error);
      }
    };

    clearSelectedAddress();

    // Scroll to top
    window.scrollTo(0, 0);
  }, [orderId, totalAmount, navigate, clearCart]);

  const formatPrice = (price) =>
    new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(price);

  const copyOrderId = () => {
    navigator.clipboard.writeText(orderId);
    notification.success({
      message: 'ƒê√£ sao ch√©p m√£ ƒë∆°n h√†ng',
      placement: 'topRight',
    });
  };

  const currentStep = 0; // ƒê∆°n h√†ng v·ª´a ƒë∆∞·ª£c ƒë·∫∑t

  const steps = [
    {
      title: 'ƒê·∫∑t h√†ng th√†nh c√¥ng',
      description: 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n',
      icon: <CheckCircleFilled style={{ color: '#52c41a' }} />,
    },
    {
      title: 'ƒêang x·ª≠ l√Ω',
      description: 'Ch√∫ng t√¥i ƒëang chu·∫©n b·ªã ƒë∆°n h√†ng',
      icon: <ShoppingOutlined />,
    },
    {
      title: 'ƒêang giao h√†ng',
      description: 'ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c v·∫≠n chuy·ªÉn',
      icon: <CarOutlined />,
    },
    {
      title: 'Giao h√†ng th√†nh c√¥ng',
      description: 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao',
      icon: <HomeOutlined />,
    },
  ];

  if (!orderId || !totalAmount) {
    return null;
  }

  return (
    <div className="order-success-container">
      <div className="order-success-header">
        <Button 
          type="text" 
          icon={<ArrowLeftOutlined />} 
          onClick={() => navigate('/')}
          className="back-button"
        >
          V·ªÅ trang ch·ªß
        </Button>
      </div>

      <div className="order-success-content">
        <Card className="success-card">
          <Result
            status="success"
            icon={<CheckCircleFilled style={{ fontSize: 72, color: '#52c41a' }} />}
            title="ƒê·∫∑t h√†ng th√†nh c√¥ng!"
            subTitle="C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng. Ch√∫ng t√¥i s·∫Ω li√™n h·ªá s·ªõm nh·∫•t!"
            extra={[
              <Button 
                type="primary" 
                size="large" 
                onClick={() => navigate('/my-orders')}
                key="view-orders"
              >
                Xem ƒë∆°n h√†ng c·ªßa t√¥i
              </Button>,
              <Button 
                size="large" 
                onClick={() => navigate('/products')}
                key="continue-shopping"
              >
                Ti·∫øp t·ª•c mua s·∫Øm
              </Button>,
            ]}
          />
        </Card>

        <Card title="Th√¥ng tin ƒë∆°n h√†ng" className="order-info-card">
          <div className="order-info-content">
            <div className="order-id-section">
              <div className="order-id-display">
                <Text strong>M√£ ƒë∆°n h√†ng:</Text>
                <div className="order-id-container">
                  <Text code className="order-id">{orderId}</Text>
                  <Button 
                    type="text" 
                    icon={<CopyOutlined />} 
                    onClick={copyOrderId}
                    className="copy-button"
                    title="Sao ch√©p m√£ ƒë∆°n h√†ng"
                  />
                </div>
              </div>
              <Paragraph className="order-id-note">
                Vui l√≤ng l∆∞u l·∫°i m√£ ƒë∆°n h√†ng ƒë·ªÉ tra c·ª©u tr·∫°ng th√°i ƒë∆°n h√†ng
              </Paragraph>
            </div>

            <Divider />

            <div className="order-summary">
              <div className="summary-item">
                <Text>Tr·∫°ng th√°i ƒë∆°n h√†ng:</Text>
                <Text strong type="success">ƒê√£ ƒë·∫∑t h√†ng th√†nh c√¥ng</Text>
              </div>
              <div className="summary-item">
                <Text>T·ªïng ti·ªÅn:</Text>
                <Text strong className="total-amount">{formatPrice(totalAmount)}</Text>
              </div>
              <div className="summary-item">
                <Text>Ph∆∞∆°ng th·ª©c thanh to√°n:</Text>
                <Text>Thanh to√°n khi nh·∫≠n h√†ng (COD)</Text>
              </div>
              <div className="summary-item">
                <Text>Th·ªùi gian ƒë·∫∑t h√†ng:</Text>
                <Text>{new Date().toLocaleString('vi-VN')}</Text>
              </div>
            </div>
          </div>
        </Card>

        <Card title="Tr·∫°ng th√°i ƒë∆°n h√†ng" className="order-status-card">
          <Steps
            current={currentStep}
            items={steps}
            className="order-steps"
          />
          <div className="status-description">
            <Paragraph>
              <Text strong>B∆∞·ªõc ti·∫øp theo:</Text> Ch√∫ng t√¥i s·∫Ω x√°c nh·∫≠n ƒë∆°n h√†ng v√† li√™n h·ªá v·ªõi b·∫°n trong th·ªùi gian s·ªõm nh·∫•t.
            </Paragraph>
            <Paragraph>
              <Text strong>Th·ªùi gian giao h√†ng d·ª± ki·∫øn:</Text> 2-5 ng√†y l√†m vi·ªác (t√πy thu·ªôc v√†o ƒë·ªãa ch·ªâ giao h√†ng)
            </Paragraph>
          </div>
        </Card>

        <Card title="H·ªó tr·ª£ kh√°ch h√†ng" className="support-card">
          <div className="support-content">
            <div className="support-item">
              <Title level={5}>üìû Hotline h·ªó tr·ª£</Title>
              <Text>1900-xxxx (Mi·ªÖn ph√≠)</Text>
              <Paragraph className="support-note">
                Th·ªùi gian l√†m vi·ªác: 8:00 - 22:00 (Th·ª© 2 - Ch·ªß nh·∫≠t)
              </Paragraph>
            </div>
            
            <Divider />
            
            <div className="support-item">
              <Title level={5}>üìß Email h·ªó tr·ª£</Title>
              <Text>support@barbershop.com</Text>
              <Paragraph className="support-note">
                Ph·∫£n h·ªìi trong v√≤ng 24 gi·ªù
              </Paragraph>
            </div>
            
            <Divider />
            
            <div className="support-item">
              <Title level={5}>üí¨ Chat tr·ª±c tuy·∫øn</Title>
              <Text>H·ªó tr·ª£ tr·ª±c tuy·∫øn 24/7</Text>
              <Paragraph className="support-note">
                Chat v·ªõi nh√¢n vi√™n h·ªó tr·ª£ ngay b√¢y gi·ªù
              </Paragraph>
            </div>
          </div>
        </Card>
      </div>
    </div>
  );
};

export default OrderSuccess; 